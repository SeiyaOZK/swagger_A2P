openapi: 3.0.0
info:
  title: A2P & Bots Gw API
  version: "1.0.0"
  description: >-
    This document describes the API that can be used by apps, bots and services in order to interact with the A2P & Bots GW.
    The A2P & Bots Gateway have different types of authentication schemes depending on request types.For Apps APIs features two authentication schemes, Basic Authentication Scheme and Digest Access Authentication Scheme. The Digest Authentication Scheme is always enabled and cannot be disabled. The Basic Authentication Scheme availability is configurable.For RCS and A2P APIs features is used OAuth 2.0 Bearer Token scheme.For Facebook Bot APIs the access token should appended to the URL query string, as defined in Facebook Messenger Platform
servers:
  - url: 'https://hoge.example.jp'
    description: Development server

paths:
  /a2p/accounts/subscribers/list:
    get:
      tags:
        - A2P Accounts API
      summary: >-
        Get subscribers of an account.
      description: >-
        Returns the list of subscribers of an account. It writes to a stream a csv file with one contact imsuri or chatId per line.
      parameters:
        - in: query
          name: anonymous
          schema:
            type: boolean
          description: Include anonymous subscribers.
          example: true
      responses:
        '200':
          description: Success. Contacts fetched successfully
        '400':
          description: Bad Request. The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: Unauthorized. The request requires user authentication.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '404':
          description: Account not found.
        '500':
          description: Internal Server Error prevents the server from processing the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'

  /a2p/campaigns:
    post:
      tags:
        - A2P Campaigns API
      summary: >-
        Create new campaign.
      description: >-
        Creates a new campaign. If the campaign scheduleInitDate field is not filled in, then the current date and time will be automatically assigned to it by the server. Returns the identifier for the created campaign. The campaign creation is limited to the configured account max campaigns per day, per week and per month.
      requestBody:
        required: true
        content:
          multipart/form-data: #Consumes
            schema:
              type: object
              properties:
                campaign:
                  $ref: '#/components/schemas/BaseCampaignDTO'
                csv:
                  description: >-
                    The csv file (one phone number per line)
                  example: >-
                    file
              required:
                - campaign
          application/json: #Produces
            schema:
              type: object
              properties:
                campaign:
                  $ref: '#/components/schemas/BaseCampaignDTO'
                csv:
                  description: >-
                    The csv file (one phone number per line)
                  example: >-
                    file
              required:
                - campaign
      responses:
        '200':
          description: Success. Request processed successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Identifier'
        '400':
          description: Bad Request. The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: Unauthorized. The request requires user authentication.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '404':
          description: Account not found.
        '500':
          description: Internal Server Error prevents the server from processing the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
    get:
      tags:
        - A2P Campaigns API
      summary: >-
        Get campaigns list.
      description: >-
        Returns the campaigns filtered by the accountId.
      parameters:
        - in: header
          name: Accept-Language
          schema:
            type: string
          description: >-
            The language that results should be returned. Any languages defined on ISO 639-1.
            example: en
            minimum: 0
            maximum: 5
        - in: query
          name: filter
          schema:
            type: string
          description: >-
            String that will be used to filter campaigns that contain this string in the title.
            example: Bot
            minimum: 0
            maximum: 255
        - in: query
          name: limit
          schema:
            type: integer
            format: int32
          description: >-
            Max number of results to be retrieved.
            example: 10
        - in: query
          name: offset
          schema:
            type: integer
            format: int32
          description: >-
            Number of elements to “skip”. Combined with Limit parameter allows pagination.
          example: 0
        - in: query
          name: order
          schema:
            type: string
          description: >-
            "Results order. Format: <field>:<desc|asc>. The selected fields can be: CampaignStatusDate, scheduleInitDate and title. The campaigns can be sorted by ascending or descending order for the selected field."
            example: campaignStatusDate:asc
            minimum: 0
            maximum: 23
        - in: query
          name: status
          schema:
            enum:
              - DRAFT
              - PREPARING
              - WAITING
              - IN_PROGRESS
              - FINISHED
              - CANCELLED
              - FAILED
              - DONE_SENT_WAITING_REVOCATION
              - REVOKING
              - PAUSED
              - CANCELLED_WITH_REVOKE
              - array(multi)
          description: >-
            Filter campaigns by their status.
          example: IN_PROGRESS

      responses:
        '200':
          description: Success. Campaigns fetched successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaginatedResultCampaignWithStatistics'
        '400':
          description: Bad Request. The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: Unauthorized. The request requires user authentication.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '404':
          description: Not Found requested account.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '500':
          description: Internal Server Error prevents the server from processing the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'

  /a2p/campaigns/{campaignId}:
    parameters:
      - in: path
        name: campaignId
        schema:
          type: integer
          format: int64
        description: >-
          Campaign identifier
        required:
          true
    post:
      tags:
        - A2P Campaigns API
      summary: >-
        Update campaign.
      description: >-
        Update a campaign. If the campaign scheduleInitDate field is not filled in, then the current date and time will be automatically assigned to it by the server.This API method is only available to Draft campaigns.
      requestBody:
        required: true
        content:
          multipart/form-data: #Consumes
            schema:
              type: object
              properties:
                campaign:
                  description: >-
                    The campaign
                  $ref: '#/components/schemas/BaseCampaignDTO'
                csv:
                  description: >-
                    The csv file (one phone number per line)
                  example: >-
                    file
              required:
                - campaign
          application/json: #Produces
            schema:
              type: object
              properties:
                campaign:
                  description: >-
                    The campaign
                  $ref: '#/components/schemas/BaseCampaignDTO'
                csv:
                  description: >-
                    The csv file (one phone number per line)
                  example: >-
                    file
              required:
                - campaign
      responses:
        '200':
          description: Success. Contacts fetched successfully
        '400':
          description: Bad Request. The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: Unauthorized. The request requires user authentication.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '500':
          description: Internal Server Error prevents the server from processing the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'

    get:
      tags:
        - A2P Campaigns API
      summary: >-
        Get campaign.
      description: >-
        Returns the campaign identified by the campaignId.
      parameters:
        - in: header
          name: Accept
          description: >-
            The language that results should be returned. Any languages defined on ISO 639-1.
            example: en
            minLength: 0
            maxLength: 5
          schema:
            type: string
        - in: path
          name: campaignId
          schema:
            type: integer
            format: int64
          description: >-
            The id of the campaign to fetch.
          required: true
      responses:
        '200':
          description: Success. CampaignDTO fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CampaignDTO'
        '400':
          description: Bad Request. The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: Unauthorized. The request requires user authentication.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '404':
          description: Not Found requested campaign.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '500':
          description: Internal Server Error prevents the server from processing the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'

    delete:
      tags:
        - A2P Campaigns API
      summary: >-
        Delete draft campaign.
      description: >-
        Returns the campaign identified by the campaignId.
      parameters:
        - in: path
          name: campaignId
          description: >-
            Campaign identifier
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: Success. draft campaign deleted successfully
        '400':
          description: Bad Request. The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: Unauthorized. The request requires user authentication.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '404':
          description: Not Found requested draft campaign.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '500':
          description: Internal Server Error prevents the server from processing the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'

  /a2p/campaigns/{campaignId}/contacts:
    get:
      tags:
        - A2P Campaigns API
      summary: >-
        Get campaign’s contacts.
      description: >-
        Returns the list of contacts and message status of the campaign. It writes to a stream a csv file with one contact imsuri and message status per line separated by a semicolon.
      parameters:
        - in: path
          name: campaignId
          description: >-
            The campaign id.
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: Success. CampaignDTO’s contacts fetched successfully
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request. The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: Unauthorized. The request requires user authentication.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '404':
          description: Not Found requested campaign.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '500':
          description: Internal Server Error prevents the server from processing the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'

  /a2p/campaigns/{campaignId}/statistics:
    get:
      tags:
        - A2P Campaigns API
      summary: >-
        Get campaign’s statistics.
      description: >-
        Returns the campaign’s statistics.
      parameters:
        - in: path
          name: campaignId
          description: >-
            The campaign id.
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: Success CampaignDTO’s contacts fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CampaignStatistics'
        '400':
          description: Bad Request The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: Unauthorized The request requires user authentication.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '404':
          description: Not Found requested campaign.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '500':
          description: Internal Server Error prevents the server from processing the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'

  /a2p/campaigns/{campaignId}/status:
    get:
      tags:
        - A2P Campaigns API
      summary: >-
        Get campaign status.
      description: >-
        Returns the campaign identified by the campaignId.
        The id of the campaign to fetch the status.
      parameters:
        - in: path
          name: campaignId
          description: >-
            The id of the campaign to fetch the status.
          schema:
            type: integer
            format: int64
          required: true
      responses:
        '200':
          description: Success CampaignShortStatus fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CampaignShortStatus'
        '400':
          description: Bad Request The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: Unauthorized The request requires user authentication.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '404':
          description: Not Found requested campaign.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '500':
          description: Internal Server Error prevents the server from processing the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'

    put:
      tags:
        - A2P Campaigns API

      summary: >-
        Sets the campaign status.
      description: >-
        Modifies the campaign status to the received campaignStatus parameter, if possible. Returns the campaign’s resulting status.
      parameters:
        - in: path
          name: campaignId
          schema:
            type: integer
            format: int64
            description: >-
              The campaign id.
          required: true
        - in: query
          name: campaignStatus
          description: >-
            The campaign status to set
          schema:
            enum:
              - IN_PROGRESS
              - CANCELLED
              - PAUSED
          example: CANCELLED
          required: true
        - in: query
          name: revocation
          description: >-
            Revoke the sent messages
          schema:
            type: boolean
            example: false
          required: false
      responses:
        '200':
          description: Success CampaignShortStatus fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CampaignShortStatus'
        '400':
          description: Bad Request The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: Unauthorized The request requires user authentication.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '404':
          description: Not Found requested campaign.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '500':
          description: Internal Server Error prevents the server from processing the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'

  /a2p/files:
    post:
      tags:
        - A2P Files API
      summary: >-
        Upload a new file.
      description: >-
        Upload a new file. There are no restrictions for the number of saved files.
      parameters:
        - in: query
          name: fileUrl
          description: >-
            The file Url
          example: >-
            http://wit.software.com/rcsbotsgateway/uploads/5bee82fa
          schema:
            type: string
        - in: query
          name: until
          description: >-
            The until. This specifies how long the user wants to keep the file.
          example: >-
            2018-07-31T21:08:15.933Z
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data: #Consumes
            schema:
              type: object
              properties:
                fileContent:
                  description: >-
                    The media file (the binary data of the actual file)
      responses:
        '200':
          description: Success Request processed successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UploadFileDTO'
        '400':
          description: Bad Request The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: Unauthorized The request requires user authentication.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '500':
          description: Internal Server Error prevents the server from processing the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'

  /bots/send:
    post:
      tags:
        - Facebook Send API V1.4
      summary: >-
        Send Message & Send Message with file
      description: >-
        Send a message to given user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                message:
                  $ref: '#/components/schemas/FacebookIncomingMessageRequest'
              required:
                - message
          multipart/form-data:
            schema:
              type: object
              properties:
                message:
                  $ref: '#/components/schemas/FacebookIncomingMessage'
                recipient:
                  $ref: '#/components/schemas/FacebookIncomingMessageRequest'
                filedata:
                  example: file
              required:
                - message
                - recipient
                - filedata
          /:
            schema:
              type: object
              properties:
                message:
                  $ref: '#/components/schemas/FacebookIncomingMessage'
                recipient:
                  $ref: '#/components/schemas/FacebookIncomingMessageRequest'
                filedata:
                  example: >-
                    file
              required:
                - message
                - recipient
                - filedata
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FacebookIncomingMessageResponse'
        '400':
          description: Bad Request The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: Unauthorized The request requires user authentication.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '500':
          description: Internal Server Error prevents the server from processing the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'



  /facebook/bot/v2.3/message_attachments:
    post:
      tags:
        - Facebook Send API V2.3
      summary: >-
        Attachment Upload from URL & Attachment Upload
      description: >-
        Upload assets from URL that can be sent in messages at a later time.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                message:
                  description: >-
                    Message object
                  $ref: '#/components/schemas/FacebookUploadRequest'
          multipart/form-data:
            schema:
              properties:
                message:
                  description: >-
                    Message object
                    $ref: '#/components/schemas/FacebookUploadRequest'
                file:
                  description: >-
                    filedata
                  example: filedata
              required:
                - message
                - file
          /:
            schema:
              properties:
                message:
                  description: >-
                    Message object
                    $ref: '#/components/schemas/FacebookUploadRequest'
                file:
                  description: >-
                    filedata
                  example: filedata
              required:
                - message
                - file
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FacebookIncomingMessageResponse'
        '400':
          description: Bad Request The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: Unauthorized The request requires user authentication.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '500':
          description: Internal Server Error prevents the server from processing the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'


  /facebook/bot/v2.3/messages:
    post:
      tags:
        - Facebook Send API V2.3
      summary: >-
        Send Message
      description: >-
        Send a message to given user. & Send Message with file
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                message:
                  description: >-
                    message
                    $ref: '#/components/schemas/    FacebookMessageRequest'
          multipart/form-data:
            schema:
              properties:
                message:
                  description: >-
                    Message object
                    $ref: '#/components/schemas/Message'
                messaging_type:
                  enum: [RESPONSE, UPDATE, MESSAGE_TAG]
                  description: >-
                    The messaging type of the message being sent
                recipient:
                  description: >-
                    recipient object
                    $ref: '#/components/schemas/User'
                file:
                  description: >-
                    filedata
              required:
                - message
                - messaging_type
                - recipient
                - file
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FacebookIncomingMessageResponse'
        '400':
          description: Bad Request The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: Unauthorized The request requires user authentication.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '500':
          description: Internal Server Error prevents the server from processing the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'


  /rcs/bot/v1/{botId}/contactCapabilities:
    get:
      tags:
        - RCS Bot API

      summary: >-
        Operations about capability
      description: >-
        This is the API to get the RCS capability of the given user’s device.
      parameters:
        - in: path
          name: botId
          schema:
            type: string
            description: >-
              The nickname, with the exclusion of the at(@).
              Example: botnews
              Length: 1 - 49
          required: true
        - in: query
          name: chatId
          schema:
            type: string
            description: >-
              The chatId. Required if userContact is not set.
              Example: "93JF93SEIJFE"
              Length: 0 - 255
          required: false
        - in: query
          name: userContact
          schema:
            type: string
          description: >-
            The userContact. Required if chatId is not set.
            Example: "+14251234567"
            Length: 0 - 255
          required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CapabilitiesResponseDTO'
        '400':
          description: Bad Request The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'
        '404':
          description: The user contact or chat ID cannot be found or the given user’s device is not RCS capabile.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'

  /rcs/bot/v1/{botId}/files:
    parameters:
      - in: path
        name: botId
        schema:
          type: string
        description: >-
          The nickname, with the exclusion of the at(@).
          Example: botnews
          Length: 1 - 49
        required: true
      - in: query
        name: fileType
        schema:
          type: string
        description: >-
          The fileType.
          Example: audio/mp4
          required: otional
      - in: query
        name: fileUrl
        schema:
          type: string
        description: >-
          The file Url.
          Example: http://www.example.com/files/example-audio.mp4
          required: optional
      - in: query
        name: until
        schema:
          type: string
        description: >-
          The until.
          Example: 2019-10-03T21:08:15.933Z
          required: optional
    post:
      tags:
        - RCS Bot API

      summary: >-
        Operations about files - Upload
      description: >-
        This is the API to upload a file to the CDN.
      requestBody:
        required: true
        content:
          multipart/form-data: #Consumes
            schema:
              type: object
              properties:
                fileContent:
                  description: >-
                    The media file
          application/json: #Consumes
            schema:
              type: object
              properties:
                fileContent:
                  description: >-
                    The media file
      responses:
        '202':
          description: The file upload request has been accepted. The Chatbot Platform will notify the Chatbot, via webhook, whether the file is ready for use in the communication with RCS users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileDTO'
        '400':
          description: This is a bad request with invalid input, invalid object, etc.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'
        '401':
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'

  /rcs/bot/v1/{botId}/files/{fileId}:
    parameters:
      - in: path
        name: botId
        schema:
          type: string
        description: >-
          The nickname, with the exclusion of the at(@).
          Example: botnews
          Length: 1 - 49
        required: true
      - in: path
        name: fileId
        schema:
          type: integer
          format: int64
        description: >-
          fileId
        required: true
    get:
      tags:
        - RCS Bot API
      summary: >-
        Operations about files - Retrieve Info
      description: >-
        This is the API to retrieve a file’s information.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileDTO'
        '400':
          description: Bad Request The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'
        '404':
          description: The user contact or chat ID cannot be found or the given user’s device is not RCS capabile.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'
        '500':
          description: Internal Server Error The server encountered an unexpected condition which prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
    delete:
      tags:
        - RCS Bot API
      summary: >-
        Operations about files - Delete
      description: >-
        This is the API to delete the file which was previously uploaded to the CDN.
      responses:
        '204':
          description: The file has been deleted.
        '400':
          description: Bad Request The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'
        '404':
          description: The file cannot be found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'

  /rcs/bot/v1/{botId}/messages:
    post:
      tags:
        - RCS Bot API

      summary: >-
        Send message
      description: >-
        This is the API used to send messages and isTyping indications to users.
      parameters:
        - in: path
          name: botId
          schema:
            type: string
          description: >-
            The nickname, with the exclusion of the at(@).
            Example: botnews
            Length: 1 - 49
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                message:
                  description: >-
                    message
                  $ref: '#/components/schemas/RCSMessageWithContactInfoDTO'
      responses:
        '202':
          description: The request of sending message or isTyping indication is accepted by the Chatbot Platform and ready to send to the user.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'
        '400':
          description: This is a bad request with invalid input, invalid object, etc.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'
        '401':
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'
        '404':
          description: The file cannot be found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'
        '500':
          description: Server Error.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'

  /rcs/bot/v1/{botId}/messages/{msgId}/status:
    parameters:
      - in: path
        name: botId
        schema:
          type: string
        description: >-
          The nickname, with the exclusion of the at(@).
          Example: botnews
          Length: 1 - 49
        required: true
      - in: path
        name: msgId
        schema:
          type: string
        description: >-
          The messsage Id.
          Example: 242432
          Length: 1 - 100
        required: true
    get:
      tags:
        - RCS Bot API
      summary: >-
        Query a given message status
      description: >-
        This is the API to query the given message status. Although the message status can be updated via webhook, this API provides an alternative optional way to check the message status. Possible message status includes ‘pending’, ‘sent’, ‘delivered’, ‘displayed’, ‘cancelled’, ‘revoked’, and ‘failed’.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'
        '400':
          description: This is a bad request with invalid input, invalid object, etc.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'
        '404':
          description: The message ID cannot be found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'
    put:
      tags:
        - RCS Bot API
      summary: >-
        Operations about message status
      description: >-
        This is the API to send read notification to users for a received message or revoke a sent message.
      requestBody:
        required: true
        content:
          application/json: #Consumes
            schema:
              type: object
              properties:
                rcsStatusUpdate:
                  description: >-
                    rcsStatusUpdate
                  $ref: '#/components/schemas/RcsStatusUpdateDTO'
      responses:
        '204':
          description: The status of the message has been updated by the Chatbot Platform. For ‘displayed’, a display notification will be sent to the user; for ‘cancelled’, the Chatbot Platform shall try to revoke the message if it has not been delivered to the user. NOTE, how to revoke a message is still under GSMA discussion so the Chatbot Platform may or may not support this operation.
        '400':
          description: This is a bad request with invalid input, invalid object, etc.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'
        '401':
          description: The request is unauthorized.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'
        '404':
          description: The message ID cannot be found.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'

  /rcs/bot:
    get:
      tags:
        - RCS Chatbot Directory API
      summary: >-
        Chatbot Information Retrievals & Chatbot Information Retrievals by nickname
      description: >-
        This endpoint has an optional authentication that will allow to identify the user and thus returning an extended version of a chatbot.
      parameters:
        - in: query
          name: hl
          schema:
            type: string
          description: >-
            Locale defined as ISO 639-1. Used to control the language of the provided query results.
            Example: en
          required: true
        - in: query
          name: ho
          schema:
            type: string
          description: >-
            Home operator of the device and this shall be represented as <MCCMNC> combination. Whereby MCC and MNC shall be replaced by the respective values of the home network in decimal format and with a 2-digit MNC padded out to 3 digits by inserting a 0 at the beginning.
            Example: 370270
          required: true
        - in: query
          name: id
          schema:
            type: string
          description: >-
            Chatbot service Identifier SIP URI. It shall not contain URL parameters and shall be encoded respecting the definitions of RFC3986.
            Example: sip:bot@domain.com
          required: true

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatBotDTO'
        '304':
          description: Not Modified.
        '400':
          description: Bad Request The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: Unauthorized The request requires user authentication.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '500':
          description: Internal Server Error The server encountered an unexpected condition which prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'

  /rcs/categories:
    get:
      tags:
        - RCS Chatbot Directory API
      summary: >-
        Get the categories.
      description: >-
        Get the categories by the order specified in the database.
      parameters:
        - in: query
          name: client_vendor
          schema:
            type: string
          description: >-
            Contains the query client_vendor HTTP GET parameter included in the configuration requests.
            Example: VNDR
          required: false
        - in: query
          name: client_version
          schema:
            type: string
          description: >-
            Contains the query client_version HTTP GET parameter included in the configuration requests.
            Example: RCSAndrd-1.0
          required: false
        - in: query
          name: hl
          schema:
            type: string
          description: >-
            Locale defined as ISO 639-1. Used to control the language of the provided query results.
            Example: en
          required: true
        - in: query
          name: ho
          schema:
            type: string
          description: >-
            Home operator of the device and this shall be represented as <MCCMNC> combination. Whereby MCC and MNC shall be replaced by the respective values of the home network in decimal format and with a 2-digit MNC padded out to 3 digits by inserting a 0 at the beginning.
            Example: 370270
          required: false
        - in: query
          name: num
          schema:
            type: integer
            format: int32
          description: >-
            The num parameter identifies the number of query objects to return. If not provided, the num value is determined by the server
            Example: 10
          required: false
        - in: query
          name: start
          schema:
            type: integer
            format: int32
          description: >-
            The start parameter indicates the first matching result that should be included in the query results. It uses a zero-based index, meaning the first result is 0, the second result is 1 and so forth. The start parameter works in conjunction with the num parameter to determine which query results to
            Example: 0
          required: false
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RCSMessageWithContactInfoResponseDTO'
        '400':
          description: Bad Request The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: Unauthorized The request requires user authentication.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '500':
          description: Internal Server Error The server encountered an unexpected condition which prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'

  /rcs/chatbots:
    get:
      tags:
        - RCS Chatbot Directory API
      parameters:
        - in: query
          name: callABot
          schema:
            type: boolean
          description: >-
            Query parameter that indicates if only chatbots with call a bot capabilities should be included in the query results.
            Example: true
          required: false
        - in: query
          name: category
          schema:
            type: integer
            format: int64
          description: >-
            Query parameter that can specify a category id to filter the query results.n the configuration requests.
            Example: 3
          required: false
        - in: query
          name: chatbot_version
          schema:
            type: string
          description: >-
            "chatbot_version optional Contains the Chatbot application version the client support. If not provided, then it means only version 1 is supported. The version parameter shall be composed as follows: version = versionnumber * [ ““ version_number ] version_number = 1*DIGIT. "
            Example: 1
          required: false
        - in: query
          name: client_vendor
          schema:
            type: string
          description: >-
            Contains the query client_vendor HTTP GET parameter included in the configuration requests.
            Example: VNDR
          required: false
        - in: query
          name: client_version
          schema:
            type: string
          description: >-
            Contains the query client_version HTTP GET parameter included in the configuration requests.
            Example: RCSAndrd-1.0
          required: false
        - in: query
          name: featured
          schema:
            type: boolean
          description: >-
            Query parameter that indicates if only featured or non featured chatbots should be included in the query results.
            Example: true
          required: false
        - in: query
          name: hl
          schema:
            type: string
          description: >-
            Locale defined as ISO 639-1. Used to control the language of the provided query results.
            Example: en
          required: true
        - in: query
          name: ho
          schema:
            type: string
          description: >-
            Home operator of the device and this shall be represented as <MCCMNC> combination. Whereby MCC and MNC shall be replaced by the respective values of the home network in decimal format and with a 2-digit MNC padded out to 3 digits by inserting a 0 at the beginning.
            Example: 370270
          required: false
        - in: query
          name: new
          schema:
            type: boolean
          description: >-
            Query parameter that indicates if only new chatbots should be included in the query results.
            Example: true
          required: false
        - in: query
          name: num
          schema:
            type: integer
            format: int32
          description: >-
            The num parameter identifies the number of query objects to return. If not provided, the num value is determined by the server
            Example: 10
          required: false
        - in: query
          name: q
          schema:
            type: string
          description: >-
            Query terms that can specify words or phrases to filter the query results that the Chatbot Directory returns. The value must be URL-escaped.
            Example: news.
          required: false

        - in: query
          name: recommended
          schema:
            type: boolean
          description: >-
            Query parameter that indicates if only recommended or non recommended chatbots should be included in the query results.
            Example: true
          required: false
        - in: query
          name: sort
          schema:
            enum:
              - NUMBER_OF_SUBSCRIPTIONS_DESC
              - NAME
              - FEATURED
              - RECOMMENDED
              - CREATION_DATE
              - STARTED_DATE
          description: >-
            The sort criteria to use.
            Example: NUMBER_OF_SUBSCRIPTIONS_DESC
          required: false
        - in: query
          name: start
          schema:
            type: integer
            format: int32
          description: >-
            The start parameter indicates the first matching result that should be included in the query results. It uses a zero-based index, meaning the first result is 0, the second result is 1 and so forth. The start parameter works in conjunction with the num parameter to determine which query results to return.
            Example: 0
          required: false
        - in: query
          name: subscribed
          schema:
            type: boolean
          description: >-
            Query parameter that indicates if only subscribed or non subscribed chatbots by the user should be included in the query results.
            Example: true
          required: false
      summary: >-
        Chatbot Directory to retrieve the list of available Chatbots
      description: >-
        This endpoint has an optional authentication that will allow to identify the user ad thus returning an extended version of each chatbot.
      responses:
        '200':
          description: Success. If the client is authenticated it returns a PaginatedResultChatBotExtendedListDTO or PaginatedResultChatBotList.
          content:
            application/json:
              schema:
                type: object
                properties:
                  PaginatedResultChatBotExtendedListDTO:
                    $ref: '#/components/schemas/PaginatedResultChatBotExtendedListDTO'
                  PaginatedResultChatBotList:
                    $ref: '#/components/schemas/PaginatedResultChatBotList'
        '400':
          description: Bad Request The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: Unauthorized The request requires user authentication.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '500':
          description: Internal Server Error The server encountered an unexpected condition which prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'

  /rcs/overview:
    get:
      tags:
        - RCS Chatbot Directory API
      summary: >-
        Get accounts overview
      description: >-
        Retrieve the “home page” data that will be shown on the APPs Bots & Brand Store.
      parameters:
        - in: query
          name: client_vendor
          schema:
            type: string
          description: >-
            Contains the query client_vendor HTTP GET parameter included in the configuration requests.
            Example: VNDR
          required: false
        - in: query
          name: client_version
          schema:
            type: string
          description: >-
            Contains the query client_version HTTP GET parameter included in the configuration requests.
            Example: RCSAndrd-1.0
          required: false
        - in: query
          name: hl
          schema:
            type: string
          description: >-
            Locale defined as ISO 639-1. Used to control the language of the provided query results.
            Example: en
          required: true
        - in: query
          name: ho
          schema:
            type: string
          description: >-
            Home operator of the device and this shall be represented as <MCCMNC> combination. Whereby MCC and MNC shall be replaced by the respective values of the home network in decimal format and with a 2-digit MNC padded out to 3 digits by inserting a 0 at the beginning.
            Example: 370270
          required: false
        - in: query
          name: num
          schema:
            type: integer
            format: int32
          description: >-
            The num parameter identifies the number of query objects to return. If not provided, the num value is determined by the server
            Example: 10
          required: false
      responses:
        '200':
          description: Success.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountOverviewSimpleViewDTO'
        '400':
          description: Bad Request The server cannot or will not process the request due to an apparent client error (e.g., malformed request syntax, invalid request message framing, or deceptive request routing).
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '401':
          description: Unauthorized The request requires user authentication.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'
        '500':
          description: Internal Server Error The server encountered an unexpected condition which prevented it from fulfilling the request.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiErrorInfo'



#=================================================
# Definitions
#=================================================

components:
  schemas:

    AccountOverviewSimpleViewDTO:
      description: This resource represents a overview of featured, recommended and top subscribed chatbots.
      type: object
      allOf:
        - properties:
            featured:
              # description: The calendarAction dto.
              $ref: '#/components/schemas/PaginatedResultChatBotExtendedListDTO'
            new:
              # description: List of new chatbots
              $ref: '#/components/schemas/PaginatedResultChatBotExtendedListDTO'
            recommended:
              # description: ListList of recommended chatbots
              $ref: '#/components/schemas/PaginatedResultChatBotExtendedListDTO'
            top:
              # description: List of top subscribed chatbots
              $ref: '#/components/schemas/PaginatedResultChatBotExtendedListDTO'

    AccountSimpleDTO:
      description:  The Account simple DTO
      type: object
      allOf:
        - properties:
            featured:
              type: boolean
              example:  false
            icon:
              type: string
              description: The icon image url
              minLength: 0
              maxLength: 500
              example: "https://www.wit-software.com/wp-content/themes/wit-software/img/mobile/favicon/favicon-160x160.png"
            id:
              type: integer
              description: The account identifier.
              example: 123
            name:
              type: string
              description: Account name
              minLength: 1
              maxLength: 255
              example: "MyBot"
            nickname:
              type: string
              description: Account nickname
              minLength: 1
              maxLength: 49
              example: “@testbot”
            verified:
              type: boolean
              example: true

    ActionDTO:
      description: This resource represents the actionDTO sent by the chatBot
      type: object
      properties:
        calendarAction:
          # description: The calendarAction dto.
          $ref: '#/components/schemas/CalendarActionDTO'
        composeAction:
          # description: The composeAction dto.
          $ref: '#/components/schemas/ComposeActionDTO'
        deviceAction:
          # description: The deviceAction dto.
          $ref: '#/components/schemas/DeviceActionDTO'
        dialerAction:
          # description: The dialerAction dto.
          $ref: '#/components/schemas/DialerActionDTO'
        displayText:
          type: string
          description: The displayText field.
          minLength: 1
          maxLength: 25
        mapAction:
          # description: The mapAction dto.
          $ref: '#/components/schemas/MapActionDTO'
        postback:
          # description: The postback dto.
          $ref: '#/components/schemas/PostbackDTO'
        settingsAction:
          # description: The settingsAction dto.
          $ref: '#/components/schemas/SettingsActionDTO'
        urlAction:
          # description: The url action dto.
          $ref: '#/components/schemas/UrlActionDTO'

    ApiErrorInfo:
      type: object
      properties:
        code:
          type: string
          # description: The code of the error.
          example: VALIDATION_ERROR
        errorMessage:
          type: string
          description: The description of the error.
          example: "rcsMessage Needs one of the following fields: textMessage, fileMessage, audioMessage, geolocationPushMessage, richcardMessage or stickerMessage."
        errors:
          type: string
          description: List of errors.
        validationErrors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'

    Attachment:
      description: "attachment object. The following can be included in the attachment object: Rich media messages including images, audios, videos, or files. Templates including generic template, button template, receipt template, or list template."
      type: object
      allOf:
        - properties:
            payload:
              # description: Payload of attachment
              $ref: '#/components/schemas/Payload'
            type:
              description: Type of attachment, may be image, audio, video, file or template

    AudioMessageDTO:
      description: This resource represents the AudioMessageDTO
      type: object
      allOf:
        - properties:
            fileMIMEType:
              type: string
              description: The MIME type of the file.
              example: "audio/aac"
            fileName:
              type: string
              description: The file name.
              example: "audio.aac"
            fileSize:
              type: integer
              description: The size of the file.
              example: 1231
            fileUrl:
              type: string
              description: The URL of the file.
              example: "http://www.example.com/files/audio.aac"
            playingLength:
              type: integer
              description: >-
                The playing length of the audio.
              example: 4535

    BaseCampaignDTO:
      description: This resource represents the base campaign.
      type: object
      allOf:
        - properties:
            campaignFailureReason:
              type: string
              description: The campaign failure Reason.
              minLength: 0
              maxLength: 255
              example: "Invalid contacts"
            campaignId:
              type: integer
              description: The campaign id.
              example: 1
            campaignStatus:
              enum:
                - DRAFT
                - PREPARING
                - WAITING
                - IN_PROGRESS
                - FINISHED
                - CANCELLED
                - FAILED
                - DONE_SENT_WAITING_REVOCATION
                - REVOKING
                - PAUSED
                - CANCELLED_WITH_REVOKE
              description: The current status of the campaign. If you are saving a draft, you must send the value ‘DRAFT’ otherwise it should have no value when creating campaign
            campaignType:
              enum:
                - OPERATOR_MESSAGING
                - BULK_DELIVERY
                - SUBSCRIPTION
              description: The campaign type.
              example: "BULK_DELIVERY"
            fallbackOption:
              enum:
                - NON_RCS_ONLY
                - ALL_BY_SMS
                - ALL_WITH_SMS_FALLBACK
                - ALL_NO_SMS_FALLBACK_WITH_REVOKE
                - ALL_NO_SMS_FALLBACK_NO_REVOKE
                - RCS_ONLY_WITH_SMS_FALLBACK
                - RCS_ONLY_NO_SMS_FALLBACK_WITH_REVOKE
                - RCS_ONLY_NO_SMS_FALLBACK_NO_REVOKE
              description: The campaign fallbackOption.
              example: "NON_RCS_ONLY"
            pausedReason:
              enum:
                - OUT_OF_DAILY_WINDOW
                - MAX_ACCOUNT_MESSAGES_REACHED_BY_DAY
                - USER_DEFINED
                - MAX_ACCOUNT_MESSAGES_REACHED_BY_MONTH
              description: The campaign paused action.
              example: "MAX_ACCOUNT_MESSAGES_REACHED_BY_DAY"
            priority:
              enum:
                - LOW
                - HIGH
              description: The campaign priority.
              example: "HIGH"
            rcsMessage:
              #              description: The campaign content DTO.
              $ref: '#/components/schemas/CampaignRCSMessageDTO'
            rescheduleInitDate:
              type: string
              description: The campaign rescheduled date.
            revocationTime:
              type: integer
              format: int32
              description: The campaign revocation time.
              example: 60
            revokeCancelledCampaign:
              type: boolean
              description: The campaign cancelled revoke option.
              example: true
            scheduleEndDate:
              type: string
              description: Date which the campaign should end. If not set, the campaign will finish when there are no more messages to send.
            scheduleInitDate:
              type: string
              description: Date which the campaign should begin. If not defined, will be assumed the actual date plus 15 seconds
            title:
              type: string
              description: The campaign title.
              minLength: 0
              maxLength: 255
              example: "Test campaign"

    CalendarActionDTO:
      description: The CalendarAction DTO
      type: object
      allOf:
        - properties:
            createCalendarEvent:
              allOf:
                - $ref: '#/components/schemas/CreateCalendarEventDTO'

    CampaignDTO:
      description: This resource represents the campaign.
      type: object
      allOf:
        - properties:
            account:
              #              description: The account simple DTO.
              $ref: '#/components/schemas/AccountSimpleDTO'
            campaignFailureReason:
              type: string
              description: The campaign failure Reason.
              minLength: 0
              maxLength: 255
              example: "Invalid contacts"
            campaignId:
              type: integer
              description: The campaign id.
              example: 1
            campaignStatus:
              enum:
                - DRAFT
                - PREPARING
                - WAITING
                - IN_PROGRESS
                - FINISHED
                - CANCELLED
                - FAILED
                - DONE_SENT_WAITING_REVOCATION
                - REVOKING
                - PAUSED
                - CANCELLED_WITH_REVOKE
              description: The current status of the campaign. If you are saving a draft, you must send the value ‘DRAFT’ otherwise it should have no value when creating campaign
            campaignType:
              enum:
                - OPERATOR_MESSAGING
                - BULK_DELIVERY
                - SUBSCRIPTION
              description: The campaign type.
              example: "BULK_DELIVERY"
            fallbackOption:
              enum:
                - NON_RCS_ONLY
                - ALL_BY_SMS
                - ALL_WITH_SMS_FALLBACK
                - ALL_NO_SMS_FALLBACK_WITH_REVOKE
                - ALL_NO_SMS_FALLBACK_NO_REVOKE
                - RCS_ONLY_WITH_SMS_FALLBACK
                - RCS_ONLY_NO_SMS_FALLBACK_WITH_REVOKE
                - RCS_ONLY_NO_SMS_FALLBACK_NO_REVOKE
              description: The campaign fallbackOption.
              example: "NON_RCS_ONLY"
            pausedReason:
              enum:
                - OUT_OF_DAILY_WINDOW
                - MAX_ACCOUNT_MESSAGES_REACHED_BY_DAY
                - USER_DEFINED
                - MAX_ACCOUNT_MESSAGES_REACHED_BY_MONTH
              description: The campaign paused action.
              example: "MAX_ACCOUNT_MESSAGES_REACHED_BY_DAY"
            priority:
              enum:
                - LOW
                - HIGH
              description: The campaign priority.
              example: "HIGH"
            rcsMessage:
              #              description: The campaign content DTO.
              $ref: '#/components/schemas/CampaignRCSMessageDTO'
            rescheduleInitDate:
              type: string
              description: The campaign rescheduled date.
            revocationTime:
              type: integer
              description: The campaign revocation time.
              example: 60
            revokeCancelledCampaign:
              type: boolean
              description: The campaign cancelled revoke option.
              example: true
            scheduleEndDate:
              type: string
              description: Date which the campaign should end. If not set, the campaign will finish when there are no more messages to send.
            scheduleInitDate:
              type: string
              description: Date which the campaign should begin. If not defined, will be assumed the actual date plus 15 seconds
            title:
              type: string
              description: The campaign title.
              minLength: 0
              maxLength: 255
              example: “Test campaign”

    CampaignRCSMessageDTO:
      description: The CampaignRCSMessage structure.
      type: object
      allOf:
        - properties:
            audioMessage:
              #              description: The RCS audio message.
              $ref: '#/components/schemas/AudioMessageDTO'
            expiry:
              type: string
              description: The is the expiry of the message. The Chatbot Platform will try to revoke this message after this expiry.
              example: “2019-09-26T01:46:04.868Z”
            fileMessage:
              #              description: The RCS file transfer.
              $ref: '#/components/schemas/FileMessageDTO'
            geolocationPushMessage:
              #              description: The RCS geolocation push.
              $ref: '#/components/schemas/GeolocationPushMessageDTO'
            isTyping:
              enum:
                - active
                - idle
              description: The isTyping notification to be sent to the user for the given Chat, or the isTyping notification received from the user for the given Chat.
              example: "ACTIVE"
            msgId:
              type: string
            richcardMessage:
              #              description: The the Rich Card JSON object.
              $ref: '#/components/schemas/RichcardMessageDTO'
            sharedData:
              #              description: The Shared Data. This can only be sent from the user to the Chatbot.
              $ref: '#/components/schemas/SharedDataDTO'
            status:
              enum:
                - pending
                - sent
                - delivered
                - displayed
                - cancelled
                - revoked
                - failed
              description: The status of the message.
              example: "SENT"
            stickerMessage:
              #              description: The sticker message structure.
              $ref: '#/components/schemas/StickerMessageDTO'
            suggestedChipList:
              #              description: The Suggested Chip List. The Chatbot shall not send a chip list alone, it needs to be sent with one of the following structures: textMessage/audioMessage/fileMessage/geolocationPushMessage/richcardMessage.
              $ref: '#/components/schemas/SuggestedChipListDTO'
            suggestedResponse:
              #              description: The the Suggested Response. This can only be sent from the user to the Chatbot.
              $ref: '#/components/schemas/SuggestedResponseDTO'
            textMessage:
              type: string
              description: his is a normal RCS text based Chat message.
              example: "text message"
            timestamp:
              type: string
              description: This is the last date-time the message is updated.
              example: "2019-09-26T01:46:04.868Z"
            trafficType:
              enum:
                - advertisement
                - payment
                - premium
                - subscription
              description: The traffic type.
              example: "ADVERTISEMENT"

    CampaignShortStatus:
      description: The CampaignShortStatus structure
      type: object
      allOf:
        - properties:
            campaignId:
              type: integer
              description: The campaign id.
              example: 1
            failureReason:
              type: string
              description: The campaign failure reason.
              minLength: 0
              maxLength: 255
              example: "Invalid contacts"
            revokeCancelledCampaign:
              type: boolean
              description: The campaign cancelled revoke option.
              example: true
            status:
              enum:
                - DRAFT
                - PREPARING
                - WAITING
                - IN_PROGRESS
                - FINISHED
                - CANCELLED
                - FAILED
                - DONE_SENT_WAITING_REVOCATION
                - REVOKING
                - PAUSED
                - CANCELLED_WITH_REVOKE
              description: "The campaign status. DRAFT: Campaign not ready to start and with edition option. PREPARING: campaign storing contacts in the database. WAITING: campaign scheduled and with contacts already processed. IN_PROGRESS: campaign in progress. FINISHED: campaign ended. CANCELLED: campaign cancelled. FAILED: campaign failed because an error. DONE_SENT_WAITING_REVOCATION: campaign ended the messages sending and is waiting to start revoking. REVOKING: campaign is revoking the messages. PAUSED: Campaign in paused state."
              example: "IN_PROGRESS"
            timestamp:
              type: string
              description: The campaign status timestamp.

    CampaignStatistics:
      type: object
      allOf:
        - properties:
            avgTimeBetweenDeliveredRead:
              type: integer
              description: Average time in seconds between delivered and read.
              example: 1000
            campaignId:
              type: integer
              description: The campaign identifier.
              example: 123
            clickedMessages:
              type: integer
              description: Number of clicked messages (meaning number of users who clicked on a campaign suggested action in the following X hours after receiving the campaign).
              example: 1000
            createdMessages:
              type: integer
              description: Number of messages not yet sent, only created in the database.
              example: 1000
            deliveredMessages:
              type: integer
              description: Number of delivered messages.
              example: 1000
            discardedContacts:
              type: integer
              description: Number of discarded contacts.
              example: 1000
            displayedMessages:
              type: integer
              description: Number of displayed messages.
              example: 1000
            endDate:
              type: string
              description: Campaign end date.
            failedMessages:
              type: integer
              description: Number of failed messages, before being sent.
              example: 1000
            invalidContacts:
              type: integer
              description: Number of messages with invalid contact.
              example: 1000
            processRevokeMessages:
              type: integer
              description: Number of messages to start the revoke process.
              example: 1000
            processingMessages:
              type: integer
              description: Number of processing messages.
              example: 1000
            repliedAndClickedMessages:
              type: integer
              description: Number of replied and clicked messages (meaning number of users who sent a message to the brand/bot and clicked on a campaign suggested action in the following X hours after receiving the campaign).
              example: 1000
            repliedMessages:
              type: integer
              description: Number of replied messages (meaning number of users who sent a message to the brand/bot in the following X hours after receiving the campaign).
              example: 1000
            revokeFailedMessages:
              type: integer
              description: Number of messages that failed the revoke process.
              example: 1000
            revokedMessages:
              type: integer
              description: Number of revoked messages.
              example: 1000
            revokingMessages:
              type: integer
              description: Number of messages to revoke in progress.
              example: 1000
            sendingMessages:
              type: integer
              description: Number of messages being sent.
              example: 1000
            sentFailedMessages:
              type: integer
              description: Number of sent messages that failed.
              example: 1000
            sentMessages:
              type: integer
              description: Number of sent messages.
              example: 1000
            startDate:
              type: string
              description: Campaign start date.
            totalMessages:
              type: integer
              description: Total of messages.
              example: 1000

    CampaignViewDTO:
      description: This resource represents a campaign view.
      type: object
      allOf:
        - properties:
            account:
              $ref: '#/components/schemas/AccountSimpleDTO'
            campaignFailureReason:
              type: string
              description: The campaign failure Reason.
              minLength: 0
              maxLength: 255
              example: "Invalid contacts"
            campaignId:
              type: integer
              description: The campaign id.
              example: 1
            campaignStatus:
              enum:
                - DRAFT
                - PREPARING
                - WAITING
                - IN_PROGRESS
                - FINISHED
                - CANCELLED
                - FAILED
                - DONE_SENT_WAITING_REVOCATION
                - REVOKING
                - PAUSED
                - CANCELLED_WITH_REVOKE
              description: The current status of the campaign. If you are saving a draft, you must send the value ‘DRAFT’ otherwise it should have no value when creating campaign
            campaignStatusDate:
              type: string
            campaignType:
              enum:
                - OPERATOR_MESSAGING
                - BULK_DELIVERY
                - SUBSCRIPTION
              description: The campaign type.
              example: "BULK_DELIVERY"
            contactCSVName:
              type: string
            contactCSVUrl:
              type: string
            fallbackOption:
              enum:
                - NON_RCS_ONLY
                - ALL_BY_SMS
                - ALL_WITH_SMS_FALLBACK
                - ALL_NO_SMS_FALLBACK_WITH_REVOKE
                - ALL_NO_SMS_FALLBACK_NO_REVOKE
                - RCS_ONLY_WITH_SMS_FALLBACK
                - RCS_ONLY_NO_SMS_FALLBACK_WITH_REVOKE
                - RCS_ONLY_NO_SMS_FALLBACK_NO_REVOKE
              description: The campaign fallbackOption.
              example: "NON_RCS_ONLY"
            pausedReason:
              enum:
                - OUT_OF_DAILY_WINDOW
                - MAX_ACCOUNT_MESSAGES_REACHED_BY_DAY
                - USER_DEFINED
                - MAX_ACCOUNT_MESSAGES_REACHED_BY_MONTH
              description: The campaign paused action.
              example: "MAX_ACCOUNT_MESSAGES_REACHED_BY_DAY"
            priority:
              enum:
                - LOW
                - HIGH
              description: The campaign priority.
              example: "HIGH"
            rcsMessage:
              description: The campaign content DTO.
              $ref: '#/components/schemas/CampaignRCSMessageDTO'
            rescheduleInitDate:
              type: string
              description: The campaign rescheduled date.
            revocationTime:
              type: integer
              description: The campaign revocation time.
              example: 60
            revokeCancelledCampaign:
              type: boolean
              description: The campaign cancelled revoke option.
              example: true
            scheduleEndDate:
              type: string
              description: Date which the campaign should end. If not set, the campaign will finish when there are no more messages to send.
            scheduleInitDate:
              type: string
              description: Date which the campaign should begin. If not defined, will be assumed the actual date plus 15 seconds
            scheduleInitDateNow:
              type: boolean
            title:
              type: string
              description: The campaign title.
              minLength: 0
              maxLength: 255
              example: "Test campaign"

    CampaignWithStatistics:
      description: This resource represents a campaign view with statistics.
      type: object
      allOf:
        - properties:
            account:
              $ref: '#/components/schemas/AccountSimpleDTO'
            campaignFailureReason:
              type: string
              description: The campaign failure Reason.
              minLength: 0
              maxLength: 255
              example: "Invalid contacts"
            campaignId:
              type: integer
              description: The campaign id.
              example: 1
            campaignStatus:
              enum:
                - DRAFT
                - PREPARING
                - WAITING
                - IN_PROGRESS
                - FINISHED
                - CANCELLED
                - FAILED
                - DONE_SENT_WAITING_REVOCATION
                - REVOKING
                - PAUSED
                - CANCELLED_WITH_REVOKE
              description: The current status of the campaign. If you are saving a draft, you must send the value ‘DRAFT’ otherwise it should have no value when creating campaign
            campaignStatusDate:
              type: string
            campaignType:
              enum:
                - OPERATOR_MESSAGING
                - BULK_DELIVERY
                - SUBSCRIPTION
              description: The campaign type.
              example: "BULK_DELIVERY"
            contactCSVName:
              type: string
            contactCSVUrl:
              type: string
            fallbackOption:
              enum:
                - NON_RCS_ONLY
                - ALL_BY_SMS
                - ALL_WITH_SMS_FALLBACK
                - ALL_NO_SMS_FALLBACK_WITH_REVOKE
                - ALL_NO_SMS_FALLBACK_NO_REVOKE
                - RCS_ONLY_WITH_SMS_FALLBACK
                - RCS_ONLY_NO_SMS_FALLBACK_WITH_REVOKE
                - RCS_ONLY_NO_SMS_FALLBACK_NO_REVOKE
              description: The campaign fallbackOption.
              example: "NON_RCS_ONLY"
            pausedReason:
              enum:
                - OUT_OF_DAILY_WINDOW
                - MAX_ACCOUNT_MESSAGES_REACHED_BY_DAY
                - USER_DEFINED
                - MAX_ACCOUNT_MESSAGES_REACHED_BY_MONTH
              description: The campaign paused action.
              example: "MAX_ACCOUNT_MESSAGES_REACHED_BY_DAY"
            priority:
              enum:
                - LOW
                - HIGH
              description: The campaign priority.
              example: "HIGH"
            rcsMessage:
              #              description: The campaign content DTO.
              $ref: '#/components/schemas/CampaignRCSMessageDTO'
            rescheduleInitDate:
              type: string
              description: The campaign rescheduled date.
            revocationTime:
              type: integer
              description: The campaign revocation time.
              example: 60
            revokeCancelledCampaign:
              type: boolean
              description: The campaign cancelled revoke option.
              example: true
            scheduleEndDate:
              type: string
              description: Date which the campaign should end. If not set, the campaign will finish when there are no more messages to send.
            scheduleInitDate:
              type: string
              description: Date which the campaign should begin. If not defined, will be assumed the actual date plus 15 seconds
            scheduleInitDateNow:
              type: boolean
            statistics:
              $ref: '#/components/schemas/CampaignStatistics'
            title:
              type: string
              description: The campaign title.
              minLength: 0
              maxLength: 255
              example: "Test campaign"

    CapabilitiesResponseDTO:
      description: The capabilities response structure.
      type: object
      allOf:
        - properties:
            capabilities:
              type: array
              description: The list of capabilities.
            reason:
              #              description: The error reason.
              $ref: '#/components/schemas/ReasonDTO'


    CategorySimpleViewDTO:
      description: This resource represents a simplified version of the category resource.
      type: object
      allOf:
        - properties:
            accountsNumber:
              type: integer
              description: >-
                The number of accounts of the category.
              example: 321
            description:
              type: string
              description: >-
                The description of the category.
              minLength: 0
              maxLength: 100
              example: “category”
            icon:
              type: string
              description: >-
                The icon url.
              minLength: 0
              maxLength: 500
              example: “https://image.freepik.com/free-vector/welcome-lettering_23-2147511605.jpg“
            id:
              type: integer
              description: >-
                The category identifier.
              example: 123
            order:
              type: integer
              description: >-
                The order of the category.
              example: 2

    ChatBotDTO:
      description: >-
        This resource represents the ChatBotDTO
      type: object
      allOf:
        - properties:
            pcc:
              #              description: Personal Contact Card
              $ref: '#/components/schemas/PersonalContactCard'

    ChatBotExtendedListDTO:
      description: >-
        This resource represents an extended version of the rcs ChatBot resource, with additional fields.
      type: object
      allOf:
        - properties:
            allowOperatorMessaging:
              type: boolean
              description: >-
                The capability allowOperatorMessaging
              example: true
            allowSubscribers:
              type: boolean
              description: >-
                The capability allowSubscribers
              example: true
            featureImage:
              type: string
              description: >-
                The feature image
              minLength: 0
              maxLength: 500
              example: “https://dummy.url.com/featureImage.jpg“
            featured:
              type: boolean
              description: >-
                The featured field
              example: false
            icon:
              type: string
              description: >-
                The icon
              minLength: 0
              maxLength: 500
              example: “https://www.wit-software.com/wp-content/themes/wit-software/img/mobile/favicon/favicon-160x160.png“
            id:
              type: string
              description: >-
                The id
              example: “sip:+351111111@wcas.wit-software.com”
            name:
              type: string
              description: >-
                The name
              minLength: 0
              maxLength: 255
              example: “News bot”
            new:
              type: boolean
              description: >-
            nickname:
              type: string
              description: >-
                The nickname
              minLength: 0
              maxLength: 50
              example: “@testbot”
            shortMessage:
              type: string
              description: >-
                The short message
              minLength: 0
              maxLength: 4000
              example: “Just do it!”
            subscribed:
              type: boolean
              description: >-
                The subscribed field
              example: false
            verified:
              type: boolean
              description: >-
                The verified field
              example: true

    ChatBotList:
      description: >-
      type: object
      allOf:
        - properties:
            icon:
              type: string
              description: >-
              example: “https://www.wit-software.com/wp-content/themes/wit-software/img/mobile/favicon/favicon-160x160.png“
            id:
              type: string
              description: >-
              example: “sip:+351111111@wcas.wit-software.com”
            name:
              type: string
              description: >-
              example: “News bot”

    CommonAddress:
      description: >-
      type: object
      allOf:
        - properties:
            tel:
              $ref: '#/components/schemas/Telephone'
            uri-entry:
              type: array

    ComposeActionDTO:
      description:  >-
        The ComposeAction DTO
      type: object
      allOf:
        - properties:
            composeRecordingMessage:
              #              description: Compose a draft message and start recording audio or video.
              $ref: '#/components/schemas/ComposeRecordingMessageDTO'
            composeTextMessage:
              #              description: Compose a draft text message.
              $ref: '#/components/schemas/ComposeTextMessageDTO'

    ComposeRecordingMessageDTO:
      description: >-
        The ComposeRecordingMessage structure
      type: object
      allOf:
        - properties:
            phoneNumber:
              type: string
              description: >-
                The phone Number.
              example: “+351999900000”
            type:
              enum:
                - AUDIO
                - VIDEO
              description: >-
                The compose type.
              example: “AUDIO”

    ComposeTextMessageDTO:
      description: >-
        The ComposeTextMessage structure
      type: object
      allOf:
        - properties:
            phoneNumber:
              type: string
              description: >-
                The phone Number.
              example: “+351999900000”
            text:
              type: string
              description: >-
                text
              minLength: 1
              maxLength: 100
              example: “text to send”

    ContentDTO:
      description: >-
        The rich card Content structure
      type: object
      allOf:
        - properties:
            description:
              type: string
              description: >-
                The content description.
              minLength: 1
              maxLength: 2000
              example: “This is the description of the rich card.”
            media:
              #              description: The media DTO.
              $ref: '#/components/schemas/MediaDTO'
            suggestions:
              type: array
              #              description: The suggestions List.
              $ref: '#/components/schemas/SuggestionDTO'
            title:
              type: string
              description: >-
                The content title.
              minLength: 1
              maxLength: 200
              example: “This is a rich card.”

    CreateCalendarEventDTO:
      description: >-
        Creates a new event on the user’s calendar
      type: object
      allOf:
        - properties:
            description:
              type: string
              description: >-
                The description.
              minLength: 1
              maxLength: 500
              example: “GSG review meeting”
            endTime:
              type: string
              description: >-
                The endTime.
              example: “2017-03-14T23:59:59Z”
            fallbackUrl:
              type: string
              description: >-
                The fallbackUrl.
              example:  “http://wit.software.com/event“
            startTime:
              type: string
              description: >-
                The startTime.
              example:  “2017-03-14T00:00:00Z”
            title:
              type: string
              description: >-
                The title.
              minLength:  1
              maxLength:  100
              example:  “Meeting”

    DeviceActionDTO:
      description: >-
        The DeviceAction structure
      type: object
      allOf:
        - properties:
            requestDeviceSpecifics:
              #              description: request for a one-time share of device specifics (device model, operating system version, messaging client identifier and version, and remaining battery charge in minutes)
              $ref: '#/components/schemas/RequestDeviceSpecificsDTO'

    DeviceSpecificsDTO:
      description: >-
        The DeviceSpecifics structure
      type: object
      allOf:
        - properties:
            batteryRemainingMinutes:
              type: integer
              description: >-
                The battery Remaining Minutes.
              example: 517
            clientVendor:
              type: string
              description: >-
                The client Vendor.
              minLength: 1
              maxLength: 4
              example: “VNDR”
            clientVersion:
              type: string
              description: >-
                The client Version.
              minLength: 1
              maxLength: 15
              example: "RCSAndrd-1.0"
            deviceModel:
              type: string
              description: >-
                The device Model.
              minLength: 1
              maxLength: 20
              example: “SmartPhone8”
            platformVersion:
              type: string
              description: >-
                The platform Version.
              minLength: 1
              maxLength: 25
              example: "Android-7.1.2-N481G3"

    DialEnrichedCallDTO:
      description: >-
        The structure to start an Enriched Call via the user’s dialler app
      type: object
      allOf:
        - properties:
            fallbackUrl:
              type: string
              description: >-
                The fallbackUrl.
              example: “https://www.google.com“
            phoneNumber:
              type: string
              description: >-
                The phoneNumber.
              example: “+1650253000”
            subject:
              type: string
              description: >-
                The subject.
              minLength: 0
              maxLength: 60
              example: “The optional subject for the enriched call.”


    DialPhoneNumberDTO:
      description: >-
        The structure to provide the call to a phone number via the user’s dialler app.
      type: object
      allOf:
        - properties:
            fallbackUrl:
              type: string
              description: >-
                The fallbackUrl.
              example: “https://www.google.com“
            phoneNumber:
              type: string
              description: >-
                The phoneNumber.
              example: “+1650253000”


    DialVideoCallDTO:
      description: >-
        The structure to start a video call via the user’s dialler app.
      type: object
      allOf:
        - properties:
            fallbackUrl:
              type: string
              description: >-
                The fallbackUrl.
              example: “https://www.google.com“
            phoneNumber:
              type: string
              description: >-
                The phoneNumber.
              example: “+1650253000”

    DialerActionDTO:
      description: >-
        The DialerAction structure.
      type: object
      allOf:
        - properties:
            dialEnrichedCall:
              #              description: The structure to start an Enriched Call via the user’s dialler app
              $ref: '#/components/schemas/DialEnrichedCallDTO'
            dialPhoneNumber:
              #              description: The structure to call a phone number via the user’s dialler app.
              $ref: '#/components/schemas/DialPhoneNumberDTO'
            dialVideoCall:
              #              description: The structure to start a video call via the user’s dialler app.
              $ref: '#/components/schemas/DialVideoCallDTO'

    DisableAnonymizationDTO:
      description: >-
        The structure to ask the user to disable the anonymization setting. The protocol doesn’t require any fields in this DTO.
      type: object

    EnableDisplayedNotificationsDTO:
      description: >-
        The structure to Ask the user to enable sending displayed notifications. The protocol doesn’t require any fields in this DTO.
      type: object

    ErrorCode:
      description: >-
        The ErrorCode structure.
      type: object
      allOf:
        - properties:
            code:
              type: integer
              description: >-
                The code number.
            message:
              type: string
              description: >-
                The error message.
            subCode:
              type: integer
              description: >-
                The sub code number.

    ExternalProperties:
      description: >-
      type: object
      allOf:
        - properties:
            address:
              type: string
              description: >-
              minLength: 0
              maxLength: 500
              example: “Taveiro, Portugal”
            addressCoordinates:
              type: string
              description: >-
              minLength: 0
              maxLength: 255
              example: “40.1939293,-8.511088400000062”
            allowCallABot:
              type: boolean
              description: >-
              example: true
            allowOperatorMessaging:
              type: boolean
              description: >-
              example: true
            allowSubscribers:
              type: boolean
              description: >-
              example: true
            featureImage:
              type: string
              description: >-
              minLength: 0
              maxLength: 500
              example: “https://dummy.url.com/featureImage.jpg“
            featured:
              type: boolean
              description: >-
              example: false
            firstMessage:
              type: string
              description: >-
              minLength: 0
              maxLength: 255
              example: “START”
            new:
              type: boolean
              description: >-
            nickname:
              type: string
              description: >-
              minLength: 0
              maxLength: 50
              example: “@testbot”
            persistentMenu:
              description: >-
              $ref: '#/components/schemas/PersistentMenuDTO'
            shortMessage:
              type: string
              description: >-
              minLength: 0
              maxLength: 4000
              example: “Just do it!”
            subscribed:
              type: boolean
              description: >-
              example: false
            subscribers:
              type: integer
              description: >-
              example: 3500
            verified:
              type: boolean
              description: >-
              example: true
            welcomeImage:
              type: string
              description: >-
              minLength: 0
              maxLength: 255
              example: “https://dummy.url.com/image.jpg“

    FacebookIncomingAddress:
      description: >-
        The FacebookIncomingAddress structure.
      type: object
      allOf:
        - properties:
            city:
              type: string
              description: >-
                The city field.
            country:
              type: string
              description: >-
                The country field.
            postal_code:
              type: string
              description: >-
                The postal_code field.
            state:
              type: string
              description: >-
                The state field.
            street_1:
              type: string
              description: >-
                The street_1 field.
            street_2:
              type: string
              description: >-
                The street_2 field.

    FacebookIncomingAdjustment:
      description: >-
        The FacebookIncomingAdjustment structure.
      type: object
      allOf:
        - properties:
            amount:
              type: number
              description: >-
                The amount field.
            name:
              type: string
              description: >-
                The name field.

    FacebookIncomingAttachment:
      description: >-
        The FacebookIncomingAttachment structure.
      type: object
      allOf:
        - properties:
            infinite_carousel:
              type: boolean
              description: >-
                The infinite_carousel field.
                example: false
            infinite_parameters:
              $ref: '#/components/schemas/FacebookIncomingInfiniteParameters'
            #              description: The infinite_parameters structure.
            payload:
              enum:
                - image
                - video
                - audio
                - file
                - template
              description: >-
                The type field.
                example: "IMAGE"

    FacebookIncomingButton:
      description: >-
        The FacebookIncomingButton structure.
      type: object
      allOf:
        - properties:
            fallback_url:
              type: string
              description: >-
                The fallback_url field.
                example: “http://example.com/test“
            messenger_extensions:
              type: boolean
              description: >-
                The messenger_extensions field.
                example: true
            payload:
              type: string
              description: >-
                The payload field.
                example: postback
            payment_summary:
              #              description: The payment_summary structure.
              example: true
              $ref: '#/components/schemas/FacebookIncomingPaymentSummary'
            title:
              type: string
              description: >-
                The title field.
                Length : 0 - 20
                example: “Button”
            type:
              enum:
                - web_url
                - postback
                - phone_number
                - element_share
                - payment
                - account_link
                - account_unlink
              description: >-
                The type field.
                example: “WEB_URL”
            url:
              type: string
              description: >-
                The url field.
                example: “http://example.com/test“
            webview_height_ratio:
              enum:
                - compact
                - tall
                - full
              description: >-
                The webview_height_ratio field.
                example: “COMPACT”

    FacebookIncomingDefaultAction:
      description: >-
        The FacebookIncomingDefaultAction structure.
      type: object
      allOf:
        - properties:
            fallback_url:
              type: string
              description: >-
                The fallback_url field.
            messenger_extensions:
              type: boolean
              description: >-
                The messenger_extensions field.
            payment_summary:
              #              description: The payment_summary structure.
              $ref: '#/components/schemas/FacebookIncomingPaymentSummary'
            type:
              enum:
                - web_url
                - postback
                - phone_number
                - element_share
                - payment
                - account_link
                - account_unlink
              description: >-
                The type field.
                example: “WEB_URL”
            url:
              type: string
              description: >-
                The url field.
            webview_height_ratio:
              enum:
                - web_url
                - postback
                - phone_number
                - element_share
                - payment
                - account_link
                - account_unlink
              description: >-
                The webview_height_ratio field.
                example: “COMPACT”

    FacebookIncomingElement:
      description: >-
        The FacebookIncomingElement structure.
      type: object
      allOf:
        - properties:
            buttons:
              type: array
              #              description: The buttons structure.
              $ref: '#/components/schemas/FacebookIncomingButton'
            currency:
              type: string
              description: >-
                The currency field.
            default_action:
              type: string
              #              description: FacebookIncomingDefaultAction
              $ref: '#/components/schemas/FacebookIncomingDefaultAction'
            image_url:
              type: string
              description: >-
                The image_url field.
            price:
              type: number
              description: >-
                The price field.
            quantity:
              type: number
              description: >-
                The quantity field.
            subtitle:
              type: string
              description: >-
                The subtitle field.
                Length : 0 - 80
            title:
              type: string
              description: >-
                The subtitle field.
                Length : 0 - 80


    FacebookIncomingInfiniteParameters:
      description: >-
        The FacebookIncomingInfiniteParameters structure.
      type: object
      properties:
        next_page_cursor:
          type: string
          description: >-
            The nextPageCursor field.
        next_request_url:
          type: string
          description: >-
            The next_request_url field.
        requested_payload:
          type:   string
          description: >-
            The requested_payload field.

    FacebookIncomingMessage:
      description: >-
        The FacebookIncomingMessage structure.
      type: object
      allOf:
        - properties:
            attachment:
              $ref: '#/components/schemas/FacebookIncomingAttachment'
            metadata:
              type: string
              description: >-
                The metadata field.
            quick_replies:
              $ref: '#/components/schemas/FacebookIncomingQuickReply'
            text:
              type: string
              description: >-
                The image_url field.

    FacebookIncomingMessageRequest:
      description: >-
      type: object
      allOf:
        - properties:
            message:
              $ref: '#/components/schemas/FacebookIncomingMessage'
            notification_type:
              enum:
                - REGULAR
                - SILENT_PUSH
                - NO_PUSH
              description: >-
                The metadata field.
            recipient:
              $ref: '#/components/schemas/FacebookIncomingRecipient'
            sender_action:
              enum:
                - mark_seen
                - typing_on
                - typing_off

    FacebookIncomingMessageResponse:
      description: >-
        The FacebookIncomingMessageResponse structure. The returned value from the facebook endpoint.
      type: object
      properties:
        attachment_id:
          type: string
          description: >-
            The attachment_id field.
        message_id:
          type: string
          description: >-
            The message_id field.
        recipient_id:
          type: string
          description: >-
            The recipient_id field.

    FacebookIncomingPayload:
      description: >-
        The FacebookIncomingPayload structure.
      type: object
      allOf:
        - properties:
            address:
              #              description: The address structure.
              $ref: '#/components/schemas/FacebookIncomingAddress'
            adjustments:
              #              description: The adjustments structure list.
              $ref: '#/components/schemas/FacebookIncomingAdjustment'
            attachment_id:
              type: string
              description: >-
                The attachment_id field.
            buttons:
              #              description: The buttons list.
              $ref: '#/components/schemas/FacebookIncomingButton'
            currency:
              type: string
              description: >-
                The currency field.
            elements:
              #              description: The elements list.
              $ref: '#/components/schemas/FacebookIncomingElement'
            is_reusable:
              type: boolean
            merchant_name:
              type: string
              description: >-
                The merchant_name field.
            order_number:
              type: string
              description: >-
                The order_number field.
            order_url:
              type: string
              description: >-
                The order_url field.
            payment_method:
              type: string
              description: >-
                The payment_method field.
            recipient_name:
              type: string
              description: >-
                The recipient_name field.
            summary:
              type: string
              #              description: The summary structure.
              $ref: '#/components/schemas/FacebookIncomingSummary'
            template_type:
              enum:
                - button
                - generic
                - list
                - receipt
                - airline_boardingpass
                - airline_checkin
                - airline_itinerary
                - airline_update
              description: >-
                The template_type structure.
            text:
              type: string
              description: >-
                The text field.
            timestamp:
              type: string
              description: >-
                The timestamp field.
            top_element_style:
              enum:
                - large
                - compact
              description: >-
                The top_element_style field.
                example: LARGE
            url:
              type: string
              description: >-
                The url field.

    FacebookIncomingPaymentSummary:
      description: >-
        The FacebookIncomingPaymentSummary structure.
      type: object
      allOf:
        - properties:
            currency:
              type: string
              description: >-
                The currency field.
            is_test_payment:
              type: boolean
              description: >-
                The is_test_payment field.
                example: true
            merchant_name:
              type: string
              description: >-
                The merchant_name field.
            payment_type:
              enum:
                - FIXED_AMOUNT
                - FLEXIBLE_AMOUNT
              description: >-
                The payment_type field.
                example: “FIXED_AMOUNT”
            price_list:
              type: array
              $ref: '#/components/schemas/FacebookIncomingPriceList'
              description: >-
                The price_list list.
            requested_user_info:
              enum:
                - shipping_address
                - contact_name
                - contact_phone
                - contact_email
              description: >-
                The requested_user_info list.
                example: “SHIPPING_ADDRESS”

    FacebookIncomingPriceList:
      description: >-
        The FacebookIncomingPriceList structure.
      type: object
      allOf:
        - properties:
            amount:
              type: string
              $ref: '#/components/schemas/FacebookIncomingMessage'
              description: >-
                The amount field.
            label:
              type: string
              description: >-
                The label field.


    FacebookIncomingQuickReply:
      description: >-
        The FacebookIncomingQuickReply structure.
      type: object
      allOf:
        - properties:
            content_type:
              enum:
                - text
                - location
              description: >-
                The content_type field.
                example: “LOCATION”
            image_url:
              type: string
              description: >-
                The image_url field.
            payload:
              type: string
              description: >-
                The payload field.
            title:
              type: string
              description: >-
                The title field.

    FacebookIncomingRecipient:
      description: >-
        The FacebookIncomingRecipient structure.
      type: object
      allOf:
        - properties:
            id:
              type: string
              description: >-
                The id field.
                example: “+999000000”
            phone_number:
              type: string
              description: >-
                The phone_number field.
                example: “+999000000”

    FacebookIncomingSummary:
      description: >-
        The FacebookIncomingSummary structure.
      type: object
      allOf:
        - properties:
            shipping_cost:
              type: number
              description: >-
                The shipping_cost field.
                example: “LOCATION”
            subtotal:
              type: number
              description: >-
                The subtotal field.
            total_cost:
              type: number
              description: >-
                The total_cost field.
            total_tax:
              type: number
              description: >-
                The total_tax field.

    FacebookMessageRequest:
      description: >-
        Used to send messages to users, including text, attachments, structured message templates, sender actions, and more.
      type: object
      allOf:
        - properties:
            message:
              $ref: '#/components/schemas/Message'
            #              description: message object. Notes Cannot be sent with sender_action
            messaging_type:
              enum:
                - FIXED_AMOUNT
                - FLEXIBLE_AMOUNT
              description: >-
                The messaging type of the message being sent
            notification_type:
              enum:
                - REGULAR
                - SILENT_PUSH
                - NO_PUSH
              description: >-
                Push notification type. Notes: Defaults to REGULAR
            recipient:
              #              description: The merchant_name field.
              $ref: '#/components/schemas/User'
            sender_action:
              enum:
                - FIXED_AMOUNT
                - FLEXIBLE_AMOUNT
              description: >-
                Message state to display to the user. Notes: Cannot be sent with message. Must be sent as a separate request. When using sender_action, recipient should be the only other property set in the request
            tag:
              type: string
              description: >-
                The message tag string


    FacebookMessageResponse:
      description: >-
        A successful Send API request returns a JSON string containing identifiers for the message and its recipient.
      type: object
      allOf:
        - properties:
            attachment_id:
              type: string
              description: >-
                The reusable attachment ID to be reused
            error:
              #              description: Error structure
              $ref: '#/components/schemas/ErrorCode'
            nmessage_id:
              type: string
              description: >-
                Unique ID for the message
            recipient_id:
              type: string
              #              description: Unique ID for the user
              $ref: '#/components/schemas/User'

    FacebookUploadRequest:
      description: >-
        The Attachment Upload supports saving assets via the Send API and Attachment Upload API. This allows you reuse assets, rather than uploading them every time they are needed. To attach a saved asset to a message, specify the attachment_id of the asset in the payload.attachment_id property of the message request
      type: object
      allOf:
        - properties:
            message:
              $ref: '#/components/schemas/FileMessage'
              description: >-
                Description of the message to be sent


    FileDTO:
      description: >-
        The file structure
      type: object
      allOf:
        - properties:
            fileId:
              type: string
              description: >-
                The file Id.
              example: 123
            fileSize:
              type: integer
              description: >-
                The file size.
              example: 12345
            fileUrl:
              type: string
              description: >-
                The fileUrl.
              example: “https://witwcs.wit-software.com/cs/b6764742“
            status:
              enum:
                - pending
                - ready
                - expired
                - invalid
              description: >-
                The file status.
              example: “pending”
            validity:
              type: string
              description: >-
                The validity.
              example: “2018-10-03T21:08:15.000Z”

    FileMessage:
      description: >-
        Message object containing the attachment.
      type: object
      allOf:
        - properties:
            attachment:
              #              description: An object describing attachments to the message
              $ref: '#/components/schemas/Attachment'

    FileMessageDTO:
      description: >-
        The RCS file transfer.
      type: object
      allOf:
        - properties:
            fileMIMEType:
              type: string
              description: >-
                The MIME type of the file.
              example: “image/jpeg”
            fileName:
              type: string
              description: >-
                The file name.
              example: “file.jpg”
            fileSize:
              type: integer
              description: >-
                The size of the file.
              example: 1234567
            fileUrl:
              type: string
              description: >-
                The URL of the file.
              example: “http://www.example.com/files/file.jpg“
            thumbnailFileName:
              type: string
              description: >-
                The file name of the thumbnail.
              example: “test.jpg”
            thumbnailFileSize:
              type: integer
              description: >-
                The size of the thumbnail.
              example: 1234
            thumbnailMIMEType:
              type: string
              description: >-
                The MIME type of the thumbnail.
              example: “image/jpeg”
            thumbnailUrl:
              type: string
              description: >-
                The URL of the thumbnail.
              example: “http://www.example.com/files/test.jpg“

    GeneralPurposeCardCarouselDTO:
      description: >-
        The RCS General Purpose Card Carousel structure.
      type: object
      allOf:
        - properties:
            content:
              type: array
              #              description: The content structure.
              $ref: '#/components/schemas/ContentDTO'
            layout:
              #              description: The Layout structure.
              $ref: '#/components/schemas/LayoutDTO'

    GeneralPurposeCardDTO:
      description: >-
        The RCS General Purpose Card structure.
      type: object
      allOf:
        - properties:
            content:
              #              description: The content structure.
              $ref: '#/components/schemas/ContentDTO'
            layout:
              #              description: The Layout structure.
              $ref: '#/components/schemas/LayoutDTO'

    GeolocationPushMessageDTO:
      description: >-
        The geolocation push to be sent via RCS.
      type: object
      allOf:
        - properties:
            expiry:
              type: string
              description: >-
                This is an absolute date at which time the recipient is no longer permitted to possess the location information.
              example: “2017-09-26T01:46:04.868Z”
            label:
              type: string
              description: >-
                This can be used to tag the nature of the location.
              minLength: 0
              maxLength: 200
              example: “meeting location”
            pos:
              type: string
              description: >-
                This is the coordinates (latitude, longitude)
              example: “26.1181289 -80.1283921”
            radius:
              type: number
              description: >-
                The radius of the circle will be represented in meters.
              example: 10.0
            timeOffset:
              type: integer
              description: >-
                This is the time zone where the location information was pushed, expressed as the number of minutes away from UTC.
              example: -300
            timestamp:
              type: string
              description: >-
                This is the time when the location information was pushed.
              example: “2017-09-26T01:46:04.868Z”

    Identifier:
      description: >-
        The Identifier structure.
      type: object
      allOf:
        - properties:
            id:
              type: string
              description: >-
                The id of a requested resource.
              example: “123”

    InputStream:
      description: >-
      type: object

    LayoutDTO:
      description: >-
        The layout of the rich card.
      type: object
      allOf:
        - properties:
            cardOrientation:
              enum:
                - HORIZONTAL
                - VERTICAL
              description: >-
                The card orientation.
              example: “HORIZONTAL”
            cardWidth:
              enum:
                - SMALL_WIDTH
                - MEDIUM_WIDTH
              description: >-
                The card width.
              example: “SMALL_WIDTH”
            imageAlignment:
              enum:
                - LEFT
                - RIGHT
              description: >-
                The image alignment.
              example: “LEFT”

    LocationDTO:
      description: >-
      type: object
      allOf:
        - properties:
            label:
              type: string
              description: >-
                The label.
              minLength: 1
              maxLength: 100
              example: “Googleplex”
            latitude:
              type: number
              description: >-
                The latitude.
                example: 37.4220041
            longitude:
              type: number
              description: >-
                The longitude.
              example: -122.0862515

    MapActionDTO:
      description: >-
        The structure for the suggested actions to interact with a location on a map.
      type: object
      allOf:
        - properties:
            requestLocationPush:
              #              description: Request for a one-time geo location push.
              $ref: '#/components/schemas/RequestLocationPushDTO'
            showLocation:
              #              description: Show a given location on a map.
              $ref: '#/components/schemas/ShowLocationDTO'

    Media:
      description: >-
        The Media structure.
      type: object
      allOf:
        - properties:
            content:
              type: string
              description: >-
            media-url:
              type: string
              description: >-
                The media-url.
            url:
              type: string
              description: >-
                The url.

    MediaDTO:
      description: >-
        The rich card media structure.
      type: object
      allOf:
        - properties:
            contentDescription:
              type: string
              description: >-
                The contentDescription.
              example: "Textual description of media content, e. g. for use with screen readers."
            height:
              enum:
                - SHORT_HEIGHT
                - MEDIUM_HEIGHT
                - TALL_HEIGHT
              description: >-
                The height.
              example: “MEDIUM_HEIGHT”
            mediaContentType:
              type: string
              description: >-
                The mediaContentType.
              example: “video/mp4”
            mediaFileSize:
              type: integer
              description: >-
                The mediaFileSize.
              example: 2343243
            mediaUrl:
              type: string
              description: >-
                The mediaUrl.
              example: “https://cdn.server/path/media.mp4“
            thumbnailContentType:
              type: string
              description: >-
                The thumbnailContentType.
              example: “image/png”
            thumbnailFileSize:
              type: integer
              description: >-
                The thumbnailFileSize.
              example: 1213
            thumbnailUrl:
              type: string
              description: >-
                The thumbnailUrl.
              example: “https://cdn.server/path/media.png“

    MediaEntries:
      description: >-
        The MediaEntries structure.
      type: object
      allOf:
        - properties:
            media-entry:
              type: array
              description: >-
                The media-entry list.

    MediaEntry:
      description: >-
      type: object
      allOf:
        - properties:
            custom-label:
              type: string
            label:
              type: string
            media:
              $ref: '#/components/schemas/Media'
            media-content:
              type: string

    Message:
      description: >-
        Message object.
      type: object
      allOf:
        - properties:
            attachment:
              #              description: attachment object. Previews the URL. Used to send messages with media or Structured Messages. Notes: text or attachment must be set
              $ref: '#/components/schemas/Attachment'
            metadata:
              type: string
              description: >-
                Custom string that is delivered as a message echo. 1000 character limit
              minLength: 0
              maxLength: 1000
            quick_replies:
              type: array
              description: >-
                Array of quick_reply to be sent with messages
            text:
              type: string
              description: >-
                Message text. Previews will not be shown for the URLs in this field. Use attachment instead. Must be UTF-8 and has a 2000 character limit. Notes: text or attachment must be set
              minLength: 0
              maxLength: 2000

    MessageContactDTO:
      description: >-
        The message contact structure.
      type: object
      allOf:
        - properties:
            chatId:
              type: string
              description: >-
                The chatId.
              example: “c7f67187-2e19-4945-a49e-409e81fce8f4”
            userContact:
              type: string
              description: >-
                The contact.
              example: “+91772000035”


    MessageDTO:
      description: >-
        The structure that contains a generalPurposeCard or a generalPurposeCardCarousel.
      type: object
      allOf:
        - properties:
            generalPurposeCard:
              #              description: The generalPurposeCard structure.
              $ref: '#/components/schemas/GeneralPurposeCardDTO'
            generalPurposeCardCarousel:
              #              description: The generalPurposeCardCarousel structure.
              $ref: '#/components/schemas/GeneralPurposeCardCarouselDTO'


    Name:
      description: >-
        The Name structure.
      type: object
      allOf:
        - properties:
            name-entry:
              #              description: The name-entry field.
              $ref: '#/components/schemas/NameEntry'

    NameEntry:
      description: >-
        The NameEntry structure.
      type: object
      allOf:
        - properties:
            display-name:
              type: string
              description: >-
                The displayName field.
              example: “Service Name”

    OpenUrlDTO:
      description: >-
        The structure that opens a web site or app via deep linking.
      type: object
      allOf:
        - properties:
            url:
              type: string
              description: >-
                The url.
              example: “http://www.google.com“

    OrganizationDetails:
      description: >-
        The OrganizationDetails structure.
      type: object
      allOf:
        - properties:
            comm-addr:
              #              description: The comm-addr field.
              $ref: '#/components/schemas/CommonAddress'
            external-properties:
              #              description: External Properties - an extension to the rcs chatbot info
              $ref: '#/components/schemas/ExternalProperties'
            media-list:
              #              description: The media-list field.
              $ref: '#/components/schemas/MediaEntries'
            name:
              #              description: The name field.
              $ref: '#/components/schemas/Name'
            org-description:
              type: string
              description: >-
                The org-description field.
            web-resources:
              #              description: The web-resources field.
              $ref: '#/components/schemas/WebResources'


    PaginatedResultCampaignWithStatistics:
      description: >-
        This object represents a paginated response to a request. The items property will contain found results.
      type: object
      allOf:
        - properties:
            items:
              type: array
              description: >-
                The returned items.
            itemsReturned:
              type: integer
              description: >-
                The number of returned items.
              example: 20
            offset:
              type: integer
              description: >-
                Number of elements “skipped”.
              example: 2
            totalItems:
              type: integer
              description: >-
                The total number of items found.
              example: 1000

    PaginatedResultCategorySimpleViewDTO:
      description: >-
        This object represents a paginated response to a request. The items property will contain found results.
      type: object
      allOf:
        - properties:
            items:
              type: array
              description: >-
                The returned items.
            itemsReturned:
              type: integer
              description: >-
                The number of returned items.
              example: 20
            offset:
              type: integer
              description: >-
                Number of elements “skipped”.
              example: 2
            totalItems:
              type: integer
              description: >-
                The total number of items found.
              example: 1000


    PaginatedResultChatBotExtendedListDTO:
      description: >-
        This is the data model of a valid RCS message.
      type: object
      allOf:
        - properties:
            bots:
              type: string
              #              description: The returned chatbots.
              $ref: '#/components/schemas/ChatBotExtendedListDTO'
            itemsReturned:
              type: integer
              description: >-
                The number of returned chatbots.
                example: 20
            startIndex:
              type: integer
              description: >-
                Number of elements skipped.
                example: 2
            totalItems:
              type: integer
              description: >-
                The RCS geolocation push.
                example: 1000


    PaginatedResultChatBotList:
      description: >-
        This is the data model of a valid RCS message.
      type: object
      allOf:
        - properties:
            bots:
              type: string
              #              description: The returned chatbots.
              $ref: '#/components/schemas/ChatBotList'
            itemsReturned:
              type: integer
              description: >-
                The number of returned chatbots.
                example: 20
            startIndex:
              type: integer
              description: >-
                Number of elements skipped.
                example: 2
            totalItems:
              type: integer
              description: >-
                The RCS geolocation push.
                example: 1000

    Payload:
      type: object

    PersistentMenuDTO:
      description: >-
        The structure for the persistent menu.
      type: object
      allOf:
        - properties:
            entries:
              type: array
              description: >-
                The number of elements of the persistent menu.

    PersistentMenuEntryDTO:
      description: >-
        The structure for each element of the persistent menu.
      type: object
      allOf:
        - properties:
            action:
              #              description: The action structure.
              $ref: '#/components/schemas/ActionDTO'
            nested:
              $ref: '#/components/schemas/PersistentMenuNestedDTO'
            reply:
              #              description: The reply structure.
              $ref: '#/components/schemas/ReplyDTO'

    PersistentMenuNestedDTO:
      description: >-
      type: object
      allOf:
        - properties:
            displayText:
              type: string
            entries:
              type: array
              $ref: '#/components/schemas/PersistentMenuEntryDTO'

    PersonalContactCard:
      description: >-
      type: object
      allOf:
        - properties:
            org-details:
              #              description: Organization Details
              $ref: '#/components/schemas/OrganizationDetails'
            pcc-type:
              type: string
              description: >-
                organization

    PostbackDTO:
      description: >-
        The structure for the postback.
      type: object
      allOf:
        - properties:
            data:
              type: string
              description: >-
                The postback info.
              minLength: 1
              maxLength: 2048
              example: “set_by_chatbot”

    QuickReply:
      description: >-
        The structure for the quick reply element.
      type: object
      allOf:
        - properties:
            content_type:
              enum:
                - text
                - location
                - user_phone_number
                - user_email
              description: >-
                The content_type structure.
            image_url:
              type: string
              description: >-
                The image_url field.
                example: “http://example.com/image“
            payload:
              type: string
              description: >-
                The payload field.
                Length: 0 - 1000
                example: “set_by_chatbot”
            title:
              type: string
              description: >-
                The title field.
                Length: 0 - 20
                example: “quick reply”

    RCSMessageDTO:
      description: >-
        The rcs message structure.
      type: object
      allOf:
        - properties:
            audioMessage:
              #              description: The RCS audio message.
              $ref: '#/components/schemas/AudioMessageDTO'
            expiry:
              type: string
              description: >-
                The is the expiry of the message. The Chatbot Platform will try to revoke this message after this expiry.
              example: “2019-09-26T01:46:04.868Z”
            fileMessage:
              #              description: The RCS file transfer.
              $ref: '#/components/schemas/FileMessageDTO'
            geolocationPushMessage:
              #              description: The RCS geolocation push.
              $ref: '#/components/schemas/GeolocationPushMessageDTO'
            isTyping:
              enum:
                - active
                - idle
              description: >-
                The isTyping notification to be sent to the user for the given Chat, or the isTyping notification received from the user for the given Chat.
              example: “ACTIVE”
            msgId:
              type: string
            richcardMessage:
              #              description: The the Rich Card JSON object.
              $ref: '#/components/schemas/RichcardMessageDTO'
            sharedData:
              #              description: The Shared Data. This can only be sent from the user to the Chatbot.
              $ref: '#/components/schemas/SharedDataDTO'
            status:
              enum:
                - pending
                - sent
                - delivered
                - displayed
                - cancelled
                - revoked
                - failed
              description: >-
                The status of the message.
              example: “SENT”
            suggestedChipList:
              #              description: The Suggested Chip List. The Chatbot shall not send a chip list alone, it needs to be sent with one of the following structures: textMessage/audioMessage/fileMessage/geolocationPushMessage/richcardMessage.
              $ref: '#/components/schemas/SuggestedChipListDTO'
            suggestedResponse:
              #              description: The the Suggested Response. This can only be sent from the user to the Chatbot.
              $ref: '#/components/schemas/SuggestedResponseDTO'
            textMessage:
              type: string
              description: >-
                This is a normal RCS text based Chat message.
              example: “text message”
            timestamp:
              type: string
              description: >-
                This is the last date-time the message is updated.
              example: "2019-09-26T01:46:04.868Z"
            trafficType:
              enum:
                - advertisement
                - payment
                - premium
                - subscription
              description: >-
                The traffic type.
              example: “ADVERTISEMENT”

    RCSMessageStatusDTO:
      description: >-
        The rcs message status structure. Is Used to do operations related to the received or sent message.
      type: object
      allOf:
        - properties:
            status:
              enum:
                - displayed
                - cancelled
              description: >-
                The status field operation.

    RCSMessageWithContactInfoDTO:
      description: >-
        This resource represents rcs message and the contact object
      type: object
      allOf:
        - properties:
            RCSMessage:
              #              description: The rcs message.
              $ref: '#/components/schemas/ErrorCode'
            messageContact:
              #              description: The message contact.
              $ref: '#/components/schemas/MessageContactDTO'


    RCSMessageWithContactInfoResponseDTO:
      description: >-
        The RCSMessageWithContactInfoResponse structure.
      type: object
      properties:
        RCSMessage:
          $ref: '#/components/schemas/RCSMessageDTO'
        #          description: The rcs message.
        reason:
          $ref: '#/components/schemas/ReasonDTO'
    #          description: Additional information from the chatbot platform.

    RcsStatusUpdateDTO:
      description: >-
        The rcs message status update structure. Is Used to do operations related to the received or sent message.
      type: object
      allOf:
        - properties:
            RCSMessage:
              $ref: '#/components/schemas/RCSMessageStatusDTO'
    #              description: The rcs message field.

    ReasonDTO:
      description: >-
        The Reason structure. Is used to provide additional information regarding the HTTP response.
      type: object
      allOf:
        - properties:
            code:
              type: integer
              description: >-
                The reason code.
              example: “VALIDATION_ERROR”
            text:
              type: string
              description: >-
                The text description of the given reason.
              example: “The account doesn’t exists”


    ReplyDTO:
      description: >-
        The structure for the reply object.
      type: object
      allOf:
        - properties:
            displayText:
              type: string
              description: >-
                The displayText.
              minLength: 1
              maxLength: 25
              example: “Yes”
            postback:
              #              description: The postback structure.
              $ref: '#/components/schemas/PostbackDTO'

    RequestDeviceSpecificsDTO:
      description: >-
        The structure to request for a one-time share of device specifics(device model, operating system version, messaging client identifier and version, and remaining battery charge in minutes). The protocol doesn’t require any fields in this DTO.
      type: object

    RequestLocationPushDTO:
      description: >-
        The structure to request request for a one-time geo location push. The protocol doesn’t require any fields in this DTO.
      type: object

    ResponseDTO:
      description: >-
        The structure for the rcs response sent by the user.
      type: object
      allOf:
        - properties:
            action:
              #              description: The action structure.
              $ref: '#/components/schemas/ActionDTO'
            reply:
              #              description: The reply structure.
              $ref: '#/components/schemas/ReplyDTO'

    RichcardMessageDTO:
      description: >-
        The structure for the richcard.
      type: object
      allOf:
        - properties:
            message:
              #              description: The message structure.
              $ref: '#/components/schemas/MessageDTO'

    SettingsActionDTO:
      description: >-
        The structure for the settings action.
      type: object
      allOf:
        - properties:
            disableAnonymization:
              #              description: The structure to ask the user to disable the anonymization setting.
              $ref: '#/components/schemas/DisableAnonymizationDTO'
            enableDisplayedNotifications:
              #              description: The structure to ask the user to enable sending displayed notifications.
              $ref: '#/components/schemas/EnableDisplayedNotificationsDTO'

    SharedDataDTO:
      description: >-
        The SharedData structure
      type: object
      allOf:
        - properties:
            deviceSpecifics:
              #              description: Request specifics about the user’s device.
              $ref: '#/components/schemas/DeviceSpecificsDTO'

    ShowLocationDTO:
      description: >-
        The ShowLocation structure. Used for showing a given location on a map.
      type: object
      allOf:
        - properties:
            fallbackUrl:
              type: string
              description: >-
                The fallbackUrl.
              example: “https://www.google.com“
            location:
              #              description: The location structure.
              $ref: '#/components/schemas/LocationDTO'

    StickerDTO:
      description: >-
        The Sticker structure. Used to store information about the sticker that will be sent.
      type: object
      allOf:
        - properties:
            contenttype:
              type: string
              description: >-
                The contentType.
              example: “image/gif”
            filename:
              type: string
              description: >-
                The fileName.
              example: “468fbb00-fdb8-4a08-9269-4579bc9d4565”
            filesSize:
              type: string
              description: >-
                The fileSize.
              example: “208512”
            subtype:
              type: string
              description: >-
                The subtype.
              example: “basic-sticker”
            url:
              type: string
              description: >-
                The url.
              example: "https://wcs.wit-software.com/resource/animated-1/1/468fbb00-fdb8-4a08-9269-4579bc9d4565"

    StickerMessageDTO:
      description: >-
        The StickerMessage structure. It can store a basic sticker or a enhanced sticker with the basic version of that sticker.
      type: object
      allOf:
        - properties:
            basicsticker:
              #              description: The basic sticker structure.
              $ref: '#/components/schemas/StickerDTO'
            enhancedSticker:
              #              description: The enhanced sticker structure.
              $ref: '#/components/schemas/StickerDTO'

    SuggestedChipListDTO:
      description: >-
        The SuggestedChipList structure. Used for store the suggestions list.
      type: object
      allOf:
        - properties:
            suggestions:
              type: array
              #              description: The suggestions list.
              $ref: '#/components/schemas/SuggestionDTO'

    SuggestedResponseDTO:
      description: >-
        The SuggestedResponse structure. Used for store the user response.
      type: object
      allOf:
        - properties:
            response:
              #              description: The response structure.
              $ref: '#/components/schemas/ResponseDTO'

    SuggestionDTO:
      description: >-
        The Suggestion structure. Used for store the reply or action that will be sent to the user.
      type: object
      allOf:
        - properties:
            action:
              #              description: The action structure.
              $ref: '#/components/schemas/ActionDTO'
            reply:
              #              description: The reply structure.
              $ref: '#/components/schemas/ReplyDTO'

    Telephone:
      description: >-
        The Telephone structure.
      type: object
      allOf:
        - properties:
            label:
              type: string
              description: >-
                The label field.
              example: “Callback”
            tel-nb:
              #              description: The tel-nb field.
              $ref: '#/components/schemas/TelephoneNumber'
            tel-type:
              type: string
              description: >-
                The tel-type field.
              example: “Work”

    TelephoneNumber:
      description: >-
        The TelephoneNumber structure.
      type: object
      allOf:
        - properties:
            tel-str:
              type: string
              description: >-
                The tel-str field.
              example: “1-800-555-1213”

    UploadFileDTO:
      description: >-
        The UploadFile structure. Used for return file upload information.
      type: object
      allOf:
        - properties:
            fileUrl:
              type: string
              description: >-
                The fileUrl.
                example: "https://witwcs.wit-software.com/cs/b6764742"
            validity:
              type: string
              description: >-
                The validity.

    UriEntry:
      description: >-
        The UriEntry structure.
      type: object
      allOf:
        - properties:
            addr-uri:
              type: string
              description: >-
                The addr-uri field.
                example : “sip:serviceid@example.com”
            addr-uri-type:
              enum:
                - SIP-URI
                - Email, Other
              description: >-
                The addr-uri-type field.
                example: “SIP-URI”
            custom-label:
              type: string
              description: >-
                The custom-label field.
            label:
              type: string
              description: >-
                The label field.
                example: “ServiceID”

    UrlActionDTO:
      description: >-
        The UrlAction structure.
      type: object
      allOf:
        - properties:
            openUrl:
              #              description: The structure to send a web site or app via deep linking.
              $ref: '#/components/schemas/OpenUrlDTO'

    User:
      description: >-
        Description of the message recipient. All requests must include one of id, phone_number, or user_ref.
      type: object
      allOf:
        - properties:
            id:
              type: string
              description: >-
                Either PSID, phone_number, or user_ref of the message recipient
            name:
              #              description: "Used only if phone_number is set. Specifies the person’s name in the format: {“first_name”:”John”, “last_name”:”Doe”}""
              $ref: '#/components/schemas/Name'
            phone_number:
              type: string
              description: >-
                Phone number of the recipient with the format +1(212)555-2368
            user_ref:
              type: string
              description: >-
                user_ref from the checkbox plugin (https://developers.facebook.com/docs/messenger-platform/discovery/checkbox-plugin)

    ValidationError:
      description: >-
        The UriEntry structure.
      type: object
      allOf:
        - properties:
            error:
              type: string
            field:
              type: string

    WebEntry:
      description: >-
        The WebEntry structure.
      type: object
      allOf:
        - properties:
            custom-label:
              type: string
              description: >-
                The custom-label field.
            label:
              type: string
              description: >-
                The label field.
                Example: Website
            url:
              type: string
              description: >-
                The url field.
                Example: "http://example.com/index.html"

    WebResources:
      description: >-
        The WebResources structure.
      type: object
      allOf:
        - properties:
            web-entry:
              description: >-
                The web-entry field.
                  $ref: '#/components/schemas/WebEntry'